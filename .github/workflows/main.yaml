name: Main

on:
  push:
    branches:
      - '**'
      - '!main'
    tags:
      - 'v*.*.*'
      - 'V*.*.*'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      bump-type:
        description: 'Type of version bump (major, minor, patch, build)'
        required: false
        default: 'build'
  pull_request:
    branches:
      - 'main'
      

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

jobs:
  decision:
    runs-on: ubuntu-latest
    outputs:
      push_image: ${{ steps.decide.outputs.push_image }}
    steps:
      - name: Decide push or load
        id: decide
        run: |
          # Default: do not push
          push_image=false
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]] && { [[ "${GITHUB_REF}" == "refs/heads/main" ]] || [[ "${GITHUB_REF_TYPE}" ==  "tag" ]]; }; then
            push_image=true
          elif [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]] && [[ "${GITHUB_REF}" == "refs/heads/main" ]] && [[ "${BUMP_TYPE}" != "build" ]]; then
            push_image=true
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]] && [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            push_image=true
          fi
          echo "push_image=${push_image}" >> "$GITHUB_OUTPUT"
      - name: Debug decision
        run: |
          echo "GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}"
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "GITHUB_REF_TYPE=${GITHUB_REF_TYPE}"
          echo "push_image (output)=${{ steps.decide.outputs.push_image }}"

  validate:
    name: Validate
    concurrency:
      group: validate-group
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v5

      - name: ‚¨¢ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '*'
          cache: npm
          
      - name: üì¶ Install Packages
        run: npm ci

      - name: üß™ Test
        run: npm test

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [validate, decision]
    if: needs.decision.outputs.push_image == 'true'
    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v5

      - name: ‚¨¢ Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '*'
          registry-url: 'https://registry.npmjs.org'

      - name: üì¶ Install Packages
        run: npm ci

      - name: Run build and get version
        id: build
        run: |
          OUTPUT=$(npm run build) 
          VERSION=$(echo $OUTPUT | grep -oP 'lawn-mower-card@\K[^ ]+') 
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV 
          echo "$VERSION"

      - name: üöÄ Release
        run: npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create Release
        run: |
          gh release create v${{ env.PACKAGE_VERSION }} \
            --repo="${GITHUB_REPOSITORY}" \
            --title="${{ env.PACKAGE_VERSION }}" \
            --notes="Release notes for v${{ env.PACKAGE_VERSION }}" \
            --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Asset
        run: |
          gh release upload v${{ env.PACKAGE_VERSION }} ./dist/lawn-mower-card.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  dependabot:
    name: Dependabot Auto-merge
    runs-on: ubuntu-latest
    needs: [validate]
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: üíø Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ÜîÔ∏è Enable Auto-merge for minor and patch Dependabot PRs
        run: gh pr merge --auto --squash "$PR_URL"
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
